name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      name:
        description: 'admin'
        required: true
        default: 'user'
      message:
        description: 'message'
        required: false
        default: '수동 워크플로우 트리거'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      - name: Make application-secret.yml without env
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
          touch ./src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.yml

      # JDK version 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker app build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend

      - name: Docker nginx build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/nginx/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx

      # ssh 접근 후 docker 이미지 pull 및 컨테이너 재시작
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu #  ec2-user 에서 변경
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/studiox
            
            sudo touch .env
            echo "${{ secrets.ENV }}" | sudo tee .env > /dev/null
            
            sudo touch docker-compose.yml
            echo "${{ secrets.DOCKER_COMPOSE_YML }}" | sudo tee docker-compose.yml > /dev/null
            
            sudo chmod 666 /var/run/docker.sock
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/nginx
            docker compose -f docker-compose.yml --env-file .env up -d
            docker image prune -f
